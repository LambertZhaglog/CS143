#include <assert.h>
#include <stdio.h>
#include "emit.h"
#include "cool-tree.h"
#include "symtab.h"

enum Basicness     {Basic, NotBasic};
#define TRUE 1
#define FALSE 0

class CgenClassTable;
typedef CgenClassTable *CgenClassTableP;

class CgenNode;
typedef CgenNode *CgenNodeP;

struct attributeNode{
  Symbol name;
  char* locate;
};
struct methodNode{
  Symbol name;
  char* label;
  bool overrider;
  int offset;
};

class CgenClassTable : public SymbolTable<Symbol,CgenNode> {
private:
   List<CgenNode> *nds;
   ostream& str;
   int stringclasstag;
   int intclasstag;
   int boolclasstag;


// The following methods emit code for
// constants and global declarations.

   void code_global_data();
   void code_global_text();
   void code_bools(int);
   void code_select_gc();
   void code_constants();

// The following creates an inheritance graph from
// a list of classes.  The graph is implemented as
// a tree of `CgenNode', and class names are placed
// in the base class symbol table.

   void install_basic_classes();// 1 step
   void install_class(CgenNodeP nd);
   void install_classes(Classes cs);// 2 step
   void build_inheritance_tree();//3 step
   void set_relations(CgenNodeP nd);
public:
   CgenClassTable(Classes, ostream& str);
   void code();
   CgenNodeP root();
   //self define
   void buildPass();
   CgenNodeP currentNode;
   int cntClassTag;
   void generatePrototype();
   void generateClassNameTable();
   void generateInit();
   CgenNodeP searchTag(int i);
   List<attributeNode> *scope;
   void generateMethod();
   attributeNode *searchScope(Symbol name);
   int branchLabel;
   int offsetFP;
   bool voidtag;
   
};
bool isAncestor(CgenNodeP child,CgenNodeP father);

class CgenNode : public class__class {
private: 
   CgenNodeP parentnd;                        // Parent of class
   List<CgenNode> *children;                  // Children of class
   Basicness basic_status;                    // `Basic' if class is basic
                                              // `NotBasic' otherwise

public:
   CgenNode(Class_ c,
            Basicness bstatus,
            CgenClassTableP class_table);
   
   void add_child(CgenNodeP child);
   List<CgenNode> *get_children() { return children; }
   void set_parentnd(CgenNodeP p);
   CgenNodeP get_parentnd() { return parentnd; }
   int basic() { return (basic_status == Basic); }


   //self define
   List<attributeNode> *attribute;
   List<methodNode> *method;
   void buildPass(CgenClassTableP env);
   int cntAttribute;
   int cntMethod;
   int classTag;
   void generatePrototype(ostream& s,CgenClassTableP env);//generate class prototype and dispatch table
   void generateInit(ostream& s, CgenClassTableP env);
   attributeNode* getAttribute(Symbol name);
   //void generateClassName(ostream& s);
   void generateMethod(ostream& s,CgenClassTableP env);
   methodNode *searchMethod(Symbol name);
   CgenNode* searchAncestor(Symbol name);
};

class BoolConst 
{
 private: 
  int val;
 public:
  BoolConst(int);
  void code_def(ostream&, int boolclasstag);
  void code_ref(ostream&) const;
};

